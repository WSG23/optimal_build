"""Overlay evaluation and decision models."""

from __future__ import annotations

from datetime import datetime
from typing import List

from sqlalchemy import (
    Boolean,
    DateTime,
    Float,
    ForeignKey,
    Index,
    Integer,
    String,
    Text,
    UniqueConstraint,
)
from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy.sql import func

from app.models.base import BaseModel
from app.models.types import FlexibleJSONB


JSONType = FlexibleJSONB


class OverlaySourceGeometry(BaseModel):
    """Stored canonical geometry inputs per project."""

    __tablename__ = "overlay_source_geometries"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    project_id: Mapped[int] = mapped_column(Integer, index=True, nullable=False)
    source_geometry_key: Mapped[str] = mapped_column(String(100), nullable=False)
    graph: Mapped[dict] = mapped_column(JSONType, nullable=False)
    metadata: Mapped[dict] = mapped_column(JSONType, default=dict)
    checksum: Mapped[str] = mapped_column(String(64), nullable=False, index=True)
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), server_default=func.now(), index=True
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), server_default=func.now(), onupdate=func.now()
    )

    suggestions: Mapped[List["OverlaySuggestion"]] = relationship(
        "OverlaySuggestion",
        back_populates="source_geometry",
        cascade="all, delete-orphan",
    )
    decisions: Mapped[List["OverlayDecision"]] = relationship(
        "OverlayDecision",
        back_populates="source_geometry",
        cascade="all, delete-orphan",
    )
    locks: Mapped[List["OverlayRunLock"]] = relationship(
        "OverlayRunLock",
        back_populates="source_geometry",
        cascade="all, delete-orphan",
    )

    __table_args__ = (
        UniqueConstraint("project_id", "source_geometry_key", name="uq_overlay_source_key"),
    )


class OverlaySuggestion(BaseModel):
    """Overlay suggestions generated by the feasibility engine."""

    __tablename__ = "overlay_suggestions"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    project_id: Mapped[int] = mapped_column(Integer, index=True, nullable=False)
    source_geometry_id: Mapped[int] = mapped_column(
        ForeignKey("overlay_source_geometries.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
    )
    code: Mapped[str] = mapped_column(String(100), nullable=False)
    type: Mapped[str | None] = mapped_column(String(50))
    title: Mapped[str] = mapped_column(String(255), nullable=False)
    rationale: Mapped[str | None] = mapped_column(Text)
    severity: Mapped[str | None] = mapped_column(String(20))
    status: Mapped[str] = mapped_column(String(20), default="pending", index=True)
    engine_version: Mapped[str | None] = mapped_column(String(50))
    engine_payload: Mapped[dict] = mapped_column(JSONType, default=dict)
    target_ids: Mapped[list[str]] = mapped_column(JSONType, default=list)
    props: Mapped[dict] = mapped_column(JSONType, default=dict)
    rule_refs: Mapped[list[str]] = mapped_column(JSONType, default=list)
    score: Mapped[float | None] = mapped_column(Float)
    geometry_checksum: Mapped[str] = mapped_column(String(64), nullable=False)
    created_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), server_default=func.now(), index=True
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), server_default=func.now(), onupdate=func.now()
    )
    decided_at: Mapped[datetime | None] = mapped_column(DateTime(timezone=True))
    decided_by: Mapped[str | None] = mapped_column(String(100))
    decision_notes: Mapped[str | None] = mapped_column(Text)

    source_geometry: Mapped[OverlaySourceGeometry] = relationship(
        "OverlaySourceGeometry", back_populates="suggestions"
    )
    decision: Mapped["OverlayDecision" | None] = relationship(
        "OverlayDecision",
        back_populates="suggestion",
        uselist=False,
    )

    __table_args__ = (
        UniqueConstraint(
            "project_id",
            "source_geometry_id",
            "code",
            name="uq_overlay_suggestion_code",
        ),
        Index("idx_overlay_suggestions_status", "project_id", "status"),
    )


class OverlayDecision(BaseModel):
    """User decisions on overlay suggestions."""

    __tablename__ = "overlay_decisions"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    project_id: Mapped[int] = mapped_column(Integer, index=True, nullable=False)
    source_geometry_id: Mapped[int] = mapped_column(
        ForeignKey("overlay_source_geometries.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
    )
    suggestion_id: Mapped[int] = mapped_column(
        ForeignKey("overlay_suggestions.id", ondelete="CASCADE"),
        nullable=False,
        unique=True,
    )
    decision: Mapped[str] = mapped_column(String(20), nullable=False, index=True)
    decided_by: Mapped[str | None] = mapped_column(String(100))
    decided_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), server_default=func.now(), index=True
    )
    notes: Mapped[str | None] = mapped_column(Text)

    suggestion: Mapped[OverlaySuggestion] = relationship(
        "OverlaySuggestion", back_populates="decision"
    )
    source_geometry: Mapped[OverlaySourceGeometry] = relationship(
        "OverlaySourceGeometry", back_populates="decisions"
    )

    __table_args__ = (
        Index("idx_overlay_decisions_project", "project_id", "decision"),
    )


class OverlayRunLock(BaseModel):
    """Lock to coordinate evaluation runs per source geometry."""

    __tablename__ = "overlay_run_locks"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    project_id: Mapped[int] = mapped_column(Integer, index=True, nullable=False)
    source_geometry_id: Mapped[int] = mapped_column(
        ForeignKey("overlay_source_geometries.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
    )
    lock_kind: Mapped[str] = mapped_column(String(50), default="evaluation")
    is_active: Mapped[bool] = mapped_column(Boolean, default=True, index=True)
    acquired_at: Mapped[datetime] = mapped_column(
        DateTime(timezone=True), server_default=func.now(), index=True
    )
    released_at: Mapped[datetime | None] = mapped_column(DateTime(timezone=True))
    notes: Mapped[str | None] = mapped_column(Text)

    source_geometry: Mapped[OverlaySourceGeometry] = relationship(
        "OverlaySourceGeometry", back_populates="locks"
    )

    __table_args__ = (
        UniqueConstraint(
            "project_id", "source_geometry_id", "lock_kind", name="uq_overlay_lock"
        ),
        Index("idx_overlay_locks_active", "project_id", "is_active"),
    )


__all__ = [
    "OverlaySourceGeometry",
    "OverlaySuggestion",
    "OverlayDecision",
    "OverlayRunLock",
]
