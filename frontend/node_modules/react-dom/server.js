const React = require('react')

const { Fragment } = React
const { popContext } = React.__internal

function escapeHtml(value) {
  return String(value)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
}

const attributeAlias = {
  className: 'class',
  htmlFor: 'for',
}

function renderAttributes(props) {
  const attributes = []
  for (const [key, value] of Object.entries(props)) {
    if (key === 'children' || value === undefined || value === null) {
      continue
    }
    if (typeof value === 'boolean') {
      if (value) {
        attributes.push(`${attributeAlias[key] ?? key}=""`)
      }
      continue
    }
    if (typeof value === 'function') {
      continue
    }
    if (key === 'style' && value && typeof value === 'object') {
      const styleString = Object.entries(value)
        .map(([name, v]) => `${name}:${v}`)
        .join(';')
      attributes.push(`${attributeAlias[key] ?? key}="${escapeHtml(styleString)}"`)
      continue
    }
    attributes.push(`${attributeAlias[key] ?? key}="${escapeHtml(value)}"`)
  }
  return attributes.length > 0 ? ` ${attributes.join(' ')}` : ''
}

function renderChildren(children) {
  if (Array.isArray(children)) {
    return children.map(renderNode).join('')
  }
  return renderNode(children)
}

function renderFunctionComponent(type, props) {
  const output = type(props || {})
  if (output && output.$$typeof === type && output.__context) {
    try {
      return renderChildren(output.props.children)
    } finally {
      popContext(output.__context)
    }
  }
  return renderNode(output)
}

function renderNode(node) {
  if (node === null || node === undefined || typeof node === 'boolean') {
    return ''
  }
  if (typeof node === 'string' || typeof node === 'number') {
    return escapeHtml(node)
  }
  if (Array.isArray(node)) {
    return node.map(renderNode).join('')
  }
  if (!node) {
    return ''
  }
  const { type, props = {} } = node
  if (type === Fragment) {
    return renderChildren(props.children ?? [])
  }
  if (typeof type === 'function') {
    return renderFunctionComponent(type, props)
  }
  if (typeof type === 'string') {
    const children = renderChildren(props.children ?? [])
    return `<${type}${renderAttributes(props)}>${children}</${type}>`
  }
  return ''
}

function renderToStaticMarkup(element) {
  return renderNode(element)
}

function renderToString(element) {
  return renderNode(element)
}

module.exports = {
  renderToStaticMarkup,
  renderToString,
}
