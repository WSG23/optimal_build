'use strict';

const React = require('react');

const internals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED || {};
const flattenChildren =
  internals.flattenChildren || ((value) => (Array.isArray(value) ? value.flatMap(flattenChildren) : [value]));

const Fragment = React.Fragment;

const ATTRIBUTE_ALIASES = {
  className: 'class',
  htmlFor: 'for',
};

const VOID_ELEMENTS = new Set(['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source']);

function renderNode(node) {
  if (node === null || node === undefined || node === false) {
    return '';
  }
  if (typeof node === 'string' || typeof node === 'number') {
    return String(node);
  }
  if (Array.isArray(node)) {
    return node.map(renderNode).join('');
  }
  if (typeof node === 'object' && node.type === Fragment) {
    const children = node.props ? node.props.children : undefined;
    return renderNode(children);
  }
  if (typeof node === 'object' && typeof node.type === 'function') {
    const output = node.type(node.props || {});
    return renderNode(output);
  }
  if (typeof node === 'object' && typeof node.type === 'string') {
    const props = node.props || {};
    const children = props.children;
    let attrs = '';
    for (const [key, value] of Object.entries(props)) {
      if (key === 'children') {
        continue;
      }
      if (value === null || value === undefined || value === false) {
        continue;
      }
      const attrName = ATTRIBUTE_ALIASES[key] || key;
      if (value === true) {
        attrs += ` ${attrName}=""`;
      } else {
        attrs += ` ${attrName}="${String(value)}"`;
      }
    }
    const content = renderChildren(children);
    if (VOID_ELEMENTS.has(node.type)) {
      return `<${node.type}${attrs}>`;
    }
    return `<${node.type}${attrs}>${content}</${node.type}>`;
  }
  if (React.isValidElement && React.isValidElement(node)) {
    return renderNode({ type: node.type, props: node.props });
  }
  return '';
}

function renderChildren(children) {
  return flattenChildren(children).map(renderNode).join('');
}

function renderToStaticMarkup(element) {
  return renderNode(element);
}

function renderToString(element) {
  return renderNode(element);
}

module.exports = {
  renderToStaticMarkup,
  renderToString,
};
