#!/bin/bash
# Pre-push hook to enforce code quality before pushing
# Install: ln -sf ../../.git-hooks/pre-push .git/hooks/pre-push

set -e

echo "üîç Running pre-push quality checks..."
echo ""

# Allow bypass with environment variable
if [ "$SKIP_PRE_PUSH_CHECKS" = "1" ]; then
    echo "‚ö†Ô∏è  Skipping pre-push checks (SKIP_PRE_PUSH_CHECKS=1)"
    echo "‚ö†Ô∏è  Make sure you know what you're doing!"
    exit 0
fi

# Check if we're on a branch that requires checks
current_branch=$(git rev-parse --abbrev-ref HEAD)
if [[ "$current_branch" == "main" ]] || [[ "$current_branch" == "develop" ]] || [[ "$current_branch" =~ ^(feature|fix|chore)/.* ]]; then
    echo "üìã Checking branch: $current_branch"
else
    echo "‚ÑπÔ∏è  Skipping checks for branch: $current_branch"
    exit 0
fi

# Run formatting check
echo "1Ô∏è‚É£  Checking code formatting..."
if ! make format-check > /dev/null 2>&1; then
    echo ""
    echo "‚ùå Code formatting check failed!"
    echo ""
    echo "Fix it by running:"
    echo "  make format"
    echo ""
    echo "Then try pushing again."
    echo ""
    echo "To bypass this check (not recommended):"
    echo "  SKIP_PRE_PUSH_CHECKS=1 git push"
    echo ""
    exit 1
fi
echo "   ‚úÖ Formatting OK"

# Run linting
echo "2Ô∏è‚É£  Running linters..."
if ! make lint > /dev/null 2>&1; then
    echo ""
    echo "‚ùå Linting failed!"
    echo ""
    echo "Fix violations and try again."
    echo "Run 'make lint' to see details."
    echo ""
    exit 1
fi
echo "   ‚úÖ Linting OK"

# Run coding rules check
echo "3Ô∏è‚É£  Checking coding rules..."
if ! make check-coding-rules > /dev/null 2>&1; then
    echo ""
    echo "‚ùå Coding rules violations detected!"
    echo ""
    echo "Run 'make check-coding-rules' to see violations."
    echo "Run 'make format && make verify' to fix most issues."
    echo ""
    exit 1
fi
echo "   ‚úÖ Coding rules OK"

echo ""
echo "‚úÖ All pre-push checks passed!"
echo "   Pushing to remote..."
echo ""

exit 0
